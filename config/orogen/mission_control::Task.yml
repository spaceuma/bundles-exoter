--- name:exoter_kinova

# Variable to define if the joints initial position is received in double type or in /base/samples/Joints type (set to 1 if it is a float)
is_vector_double: 1

# Number of Kinova arm joints
num_arm_joints: 8  

# Number of gripper parts
num_gripper: 2

# Number of waypoints to perform last movement
last_movement_waypoints: 5 

# Vector with the joints final position (defined with MatLab): the first link position 
#is "pi" to make the arm go downwards to fetch the sample on the ground (in fact, putting 
#a 0 there would make the arm go upwards)
joints_final_position: [3.1416, -1.9635, -1.9635, 0, 1.5708, 3.1416, 0, 0]
# For the arm deployment (while the rover is moving, before pausing near to the sample to fetch it):
#joints_final_position: [3.1416, 0, 0, 0, 0, 0, 0, 0]

# Opened gripper position
open_gripper_position: [-0.8, -0.8]

# Closed gripper position
final_gripper_position: [0.3, 0.3]

#RoCK kinematic model, equal to the joints_final_position but with opposite numbers
arm_model_initial_config: [-3.1416, 1.9635, 1.9635, 0, -1.5708, -3.1416, 0, 0]

#Vortex model
arm_real_initial_config: [0,0,0,0,0,0,0,0]

# Vector with the direction of each arm joint
arm_joints_direction: [1,1,1,1,1,1,1,1]

# Value to define if there are negative angles (related with the arm joints directions)
negative_angles: 1 

# Value that define if the sample coordinates are received with respect to the World from Unreal or Vortex, or with respect to the camera.
# If the value is set to 1, the sample coordinates are received with respect to the World from Unreal or Vortex 
# If the value is set to 2, the sample coordinates are received with respect to the camera
sample_mode: 2 

# Distance between rover arm and ground
arm_ground_distance: 0.10

# Distance between rover body and ground (the Vortex one is 0.279)
body_ground_distance: 0.288

navcam_armBase_position: [-0.07499973, 0.14890332, 0.7858974]

loccam_armBase_position: [0.027020027, 0.14890332, 0.2038974]

navcam_armBase_orientation: [0, -1.570796327, 1.570796327]

loccam_armBase_orientation: [0, -1.570796327, 1.570796327]

navcam_roverBody_position: [0.128, 0, 0.703]

loccam_roverBody_position: [0.230, 0, 0.121]

navcam_roverBody_orientation: [0, 0, 0]

loccam_roverBody_orientation: [0, -0.785398163, 0]

roverBody_armBase_position: [0.20299329, -0.14890331, -0.0723974]

roverBody_armBase_orientation: [0, 1.570796327, -3.141592654]

# Vector with the length of each arm joint: [ (128.3 / 2) * pow(10, -3), (115 / 2) * pow(10, -3), (280 / 2) * pow(10, -3), (140 / 2) * pow(10, -3), (105 / 2) * pow(10, -3), (105 / 2) * pow(10, -3), (130 / 2) * pow(10, -3)]
kinova_linksLength: [0.0642, 0.0575, 0.14, 0.07, 0.0525, 0.0525, 0.065]

ExoTeR_linksLength: [0.0642, 0.0575, 0.14, 0.07, 0.0525, 0.0525, 0.065]


# Vector with the X distance between the arm base and the rover centre
x_distance_roverCentre_armBase: 0.207

# Vector with the Y distance between the arm base and the rover centre
y_distance_roverCentre_armBase:  -0.149


--- name:unreal_exoter_kinova

# Variable to define if the joints initial position is received in double type or in /base/samples/Joints type (set to 1 if it is a float)
is_vector_double: 1

# Number of Kinova arm joints
num_arm_joints: 8  

# Number of gripper parts
num_gripper: 2

# Number of waypoints to perform last movement
last_movement_waypoints: 5 

# Vector with the joints final position (defined with MatLab): the first link position 
#is "pi" to make the arm go downwards to fetch the sample on the ground (in fact, putting 
#a 0 there would make the arm go upwards)
joints_final_position: [3.1416, -1.9635, -1.9635, 0, 1.5708, 3.1416, 0, 0]
# For the arm deployment (while the rover is moving, before pausing near to the sample to fetch it):
#joints_final_position: [3.1416, 0, 0, 0, 0, 0, 0, 0]

# Opened gripper position
open_gripper_position: [-0.8, -0.8]

# Closed gripper position
final_gripper_position: [0.15, 0.15]

#RoCK kinematic model, equal to the joints_final_position but with opposite numbers
arm_model_initial_config: [-3.1416, 1.9635, 1.9635, 0, -1.5708, -3.1416, 0, 0]

#Vortex model
arm_real_initial_config: [0,0,0,0,0,0,0,0]

# Vector with the direction of each arm joint
arm_joints_direction: [1,1,1,1,1,1,1,1]

# Value to define if there are negative angles (related with the arm joints directions)
negative_angles: 1 

# Distance between rover arm and ground
arm_ground_distance: 0.10

# Distance between rover body and ground (the Vortex one is 0.279)
body_ground_distance: 0.2980

navcam_armBase_position: [-0.075, 0.1489, 0.7859]

loccam_armBase_position: [-0.2039, 0.1489, 0.027]

navcam_armBase_orientation: [0, 0, 0]

loccam_armBase_orientation: [0, -0.785398163, 0]

navcam_roverBody_position: [0.128, 0, 0.7135]

loccam_roverBody_position: [0.230, 0, 0.1315]

navcam_roverBody_orientation: [0, 0, 0]

loccam_roverBody_orientation: [0, 0.785398163, 0]

roverBody_armBase_position: [0.20299329, -0.14890331, -0.0723974]

roverBody_armBase_orientation: [0, 1.570796327, 0]

# Vector with the arm base position
#arm_base_position: [-0.02700027, 0.12126709, 0.1961026]

# Vector with the rover body position
#rover_body_position: [-0.22999599,0.2701704, 0.2685]

# Vector with the loccam position
#loccam_position: [0, 0.27017041, 0.400]

# Vector with the navcam position
#navcam_position: [-0.102, 0.27017041, 0.982]

# Vector with the arm base orientation
#arm_base_orientation: [0, 1.570796327, 0]

# Vector with the rover body orientation
#rover_body_orientation: [0, 0, 0]

# Vector with the loccam orientation
#loccam_orientation: [0, 0, 90]

# Vector with the navcam orientation
#navcam_orientation: [0, 0, 90]

# Vector with the length of each arm joint: [ (128.3 / 2) * pow(10, -3), (115 / 2) * pow(10, -3), (280 / 2) * pow(10, -3), (140 / 2) * pow(10, -3), (105 / 2) * pow(10, -3), (105 / 2) * pow(10, -3), (130 / 2) * pow(10, -3)]
kinova_linksLength: [0.0642, 0.0575, 0.14, 0.07, 0.0525, 0.0525, 0.065]

ExoTeR_linksLength: [0.0642, 0.0575, 0.14, 0.07, 0.0525, 0.0525, 0.065]

# Vector with the X distance between the arm base and the rover centre
x_distance_roverCentre_armBase: 0.2070 

# Vector with the Y distance between the arm base and the rover centre
y_distance_roverCentre_armBase: -0.1490 

# Initial sample position
#initial_sample_position: [510, 512, 0]
initial_sample_position: [510.6, 512.1, 0]
#initial_sample_position: [509.68, 509.17, 0]

# Initial sample orientation
initial_sample_orientation: [0, 0, 0]

# UDP ports to read data from UDP
kimu_port_c: 6000

kimu_port_s: 6001

# Remote address (Virtual Machine)
addr_s: "172.16.78.80"

# Local address (Cameras)
addr_c: "172.16.78.23"

# Varible to define if the final movement will be done with the arm base aligned with the sample (true), or with the rover body aligned with the sample (false)
arm_base_aligned: false

# Value that define if the sample coordinates are received with respect to the World from Unreal or Vortex, or with respect to the camera.
# If the value is set to 1, the sample coordinates are received with respect to the World from Unreal or Vortex 
# If the value is set to 2, the sample coordinates are received with respect to the camera
sample_mode: 1 

# Variable that defines if we are receiving sample data using UDP communication (with respect to the camera, sample_mode: 2)
udp_config: false

# Variable to choose which arm is being used. 
# If arm_type = 0, the Kinova Lite 3 arm is being used.
# If arm_type = 1, the ExoTeR is being used
arm_type: 0



--- name:exoter_rover

# Variable to define if the joints initial position is received in double type or in /base/samples/Joints type (set to 1 if it is a float)
is_vector_double: 0

# Number of arm joints
num_arm_joints: 5 

# Number of gripper parts
num_gripper: 2

# Number of waypoints to perform last movement
last_movement_waypoints: 5 

#Joints final position, elbow up:
joints_final_position: [1, 1.5708, -2.21, 0, 0]
#Joints final position, elbow down:
#joints_final_position: [-1.5708, -0.6721, -0.5, -0.3456, 0]

#Joints initial position
#joints_initial_pos : [1 1.5708 -2.21 0 0]

# Opened gripper position
open_gripper_position: [-0.8, -0.8]

# Closed gripper position
final_gripper_position: [0.15, 0.15]

#RoCK kinematic model, equal to the joints_final_position but with opposite numbers
arm_model_initial_config: [-1.0, -1.5708, 2.21, 0, 0]

#Vortex model
arm_real_initial_config: [0,0,0,0,0]

# Vector with the direction of each arm joint
arm_joints_direction: [1,1,1,1,1]

# Value to define if there are negative angles (related with the arm joints directions)
negative_angles: 1 

# Distance between rover arm and ground
arm_ground_distance: 0.23

# Distance between rover body and ground (the Vortex one is 0.279)
body_ground_distance: 0.202

navcam_armBase_position: [-0.107, 0.21, 0.699]

loccam_armBase_position: [0.03, 0.21, 0.202]

navcam_armBase_orientation: [0, -1.0472, 0]

loccam_armBase_orientation: [0, -1.0472, 0]

navcam_roverBody_position: [0.058, 0.06, 0.727]

loccam_roverBody_position: [0.195, 0.06, 0.23]

navcam_roverBody_orientation: [0, 0.5236, 0]

loccam_roverBody_orientation: [0, 0.5236, 0]

roverBody_armBase_position: [0.165, -0.15, 0.028]

roverBody_armBase_orientation: [0, 1.570796327, 0]

# Vector with the length of each arm joint: [ (128.3 / 2) * pow(10, -3), (115 / 2) * pow(10, -3), (280 / 2) * pow(10, -3), (140 / 2) * pow(10, -3), (105 / 2) * pow(10, -3), (105 / 2) * pow(10, -3), (130 / 2) * pow(10, -3)]
kinova_linksLength: [0.0642, 0.0575, 0.14, 0.07, 0.0525, 0.0525, 0.065]

ExoTeR_linksLength: [0.0895, 0.206, 0.176, 0.1755]
#ExoTeR_linksLength: [0.0895, 0.206, 0.176, 0.0555]

# Vector with the X distance between the arm base and the rover centre
x_distance_roverCentre_armBase: 0.165 

# Vector with the Y distance between the arm base and the rover centre
y_distance_roverCentre_armBase: -0.15 

# Initial sample position
#initial_sample_position: [510, 512, 0]
initial_sample_position: [14.18, 146.76, 0]
#initial_sample_position: [509.68, 509.17, 0]

# Initial sample orientation
initial_sample_orientation: [0, 0, 0]

# UDP ports to read data from UDP
kimu_port_c: 6000

kimu_port_s: 6001

# Remote address (Virtual Machine)
addr_s: "127.0.0.1"

# Local address (Cameras)
addr_c: "127.0.0.1"

# Varible to define if the final movement will be done with the arm base aligned with the sample (true), or with the rover body aligned with the sample (false)
arm_base_aligned: false

# Value that define if the sample coordinates are received with respect to the World from Unreal or Vortex, or with respect to the camera.
# If the value is set to 1, the sample coordinates are received with respect to the World from Unreal or Vortex 
# If the value is set to 2, the sample coordinates are received with respect to the camera
sample_mode: 2 

# Variable that defines if we are receiving sample data using UDP communication (with respect to the camera, sample_mode: 2)
udp_config: true 

# Variable to choose which arm is being used. 
# If arm_type = 0, the Kinova Lite 3 arm is being used.
# If arm_type = 1, the ExoTeR is being used
arm_type: 1
